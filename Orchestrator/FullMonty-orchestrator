////////////////////////////////////////////////////////////////////////////////////////////////////
//
//
//  Lady Green Forensic Component     : FULLMONTY - ORCHESTRATOR
//
//  Signature                         : LGF/APPS/FULLMONTY/ORCHESTRATOR
//  Component version                 : 1.0.0
//  release date                      : August 2023
//
//  Description : This component is the Orechestrator component of the FULLMONTY SYSTEM.
//                This script schedules the execution of the Choregraphy
//
//
//  copyright Â© Lady Green Forensic 2023
//
//  This script is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License, version 3 
//  (https://www.gnu.org/licenses/gpl-3.0.html)lcode)
//
///////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////
// constants
////////////////////////////////////
string K_Version = "1.0.0"; // version of the component

integer K_CANAL_MASTER = 1;
integer K_CANAL_STORAGE = 2;
integer K_CANAL_EVENT = 3;
integer K_CHANNEL_INTEGRATION = 4;

string K_MSG_GET= "GET";
string K_MSG_GET_ACK  = "GET_ACK";
string K_MSG_NEXT_STEP ="NEXT_STEP";

// Bad Return codes for storage
string K_CAPACITY_FULL = "FULL_STORAGE";
string K_STORAGE_EMPTY = "EMPTY_STORAGE";
string K_STORAGE_INDEX_INVALID = "STORAGE_INDEX_INVALID";

// commands for storage
string K_MSG_RELOAD_STORAGE = "STORAGE_RELOAD";
string K_MSG_STORAGE_DEBUGON = "STORAGE_DEBUGON";
string K_MSG_STORAGE_DEBUGOFF = "STORAGE_DEBUGOFF";

//Commands for integration
string K_MSG_INTEGRATION_DEBUGON = "INTEGRATION_DEBUGON";
string K_MSG_INTEGRATION_DEBUGOFF = "INTEGRATION_DEBUGOFF";
string K_MSG_INTEGRATION_SMOGON = "INTEGRATION_SMOG_ON";
string K_MSG_INTEGRATION_SMOGOFF = "INTEGRATION_SMOG_OFF";
string K_MSG_REZZ_PRIM            = "REZZPRIM";
string K_MSG_RESET_REZZ_PRIM      = "RESET_REZZPRIM";

string K_MSG_INTEGRATION_LOAD_SPEAKER = "INTEGRATION_SPEAKER_LOAD";
string K_MSG_INTEGRATION_PLAY_SPEAKER = "INTEGRATION_SPEAKER_PLAY";
string K_MSG_INTEGRATION_STOP_SPEAKER = "INTEGRATION_SPEAKER_STOP";

string K_ID_MESSAGELINK_INTEGRATOR = "INTEGRATOR";
integer K_MSG_INTEGRATOR_REGISTER = 1;
integer K_MSG_INTEGRATOR_HANDSHAKE= 2;
integer K_MSG_INTEGRATOR_RESET = 3; 
integer K_MSG_INTEGRATOR_SEND = 4;
integer K_MSG_INTEGRATOR_MODE_REHEARSAL = 5; 
integer K_MSG_INTEGRATOR_MODE_SHOW = 6;
// Events Messages
string K_MSG_EVENT_STORAGE_INITIALIZED = "STORAGE_INITIALIZED";
string K_IS_MSG_EVENT_STORAGE_INITIALIZED = "IS_STORAGE_INITIALIZED";
string K_IS_MSG_EVENT_STORAGE_INITIALIZED_ACK = "IS_STORAGE_INITIALIZED_ACK";

// Buffer
integer K_SIZE_BUFFER = 5;

// Antenna Link
integer K_LINK_INTEGRATION = 2;

// MESSAGES FOR POSEBALL
string K_POSEBALL_ACK = "POSEBALL_INITIALIZED_ACK";
string K_INIT_POSEBALL = "POSEBALL_INITIALIZED";
string K_POSEBALL_ANIMATION_START = "POSEBALL_ANIMATION_START";
string K_POSEBALL_ANIMATION_STOP = "POSEBALL_ANIMATION_STOP";
string K_POSEBALL_ROTATION = "POSEBALL_ROTATION";
string K_POSEBALL_MOVE = "POSEBALL_MOVE";
string K_MSG_POSEBALL_DEBUGON = "POSEBALL_DEBUGON";
string K_MSG_POSEBALL_DEBUGOFF = "POSEBALL_DEBUGOFF";
string K_MSG_MOVER_KILL = "{FM:DIE}";
string K_POSEBALL_STRIP = "POSEBALL_STRIP";
string K_POSEBALL_REGISTER_STRIP = "POSEBALL_REGISTER_STRIP";

integer K_MODE_REHEARSAL = 1;
integer K_MODE_SHOW = 0;
integer K_MODE_ORCHESTRATOR_NORMAL = 0;
integer K_MODE_ORCHESTRATOR_PENDING = 1;

//ERRORS
string K_ERR_ORC_001 = "ERR_ORC_001 : Invalid component registration";

////////////////////////////////////
// variables
////////////////////////////////////
integer debugMode = 0;
list bufferCmd = [];
integer channelChat = 1;
integer channelPoseball = 100;
integer handleListenChat = 0;
integer handleListenPoseball = 0;
string waitCommand = "";
list poseballs=[];
list poseballNames=[];
list poseballDefaultPoses=[];
list poseballOffsetAvatar=[];
list poseballRotationAvatar=[];
integer mode=0; // 0 = show, 1=rehearsal
integer orchestratorMode = 0; // 0=normal, 1=pending;
float currentTime = 0;

////////////////////////////////////
// log function
////////////////////////////////////
debug (string pLog) {
    if (debugMode == 1) {
        llSay(DEBUG_CHANNEL,llGetScriptName()  + ":" + pLog);
    }
}
////////////////////////////////////
// Error function
////////////////////////////////////
error (string errorCode, string pLog) {
    llSay(DEBUG_CHANNEL,llGetScriptName()  + ":" + errorCode + ":  " + pLog);
}

initialize() {
    debug ("Checking storage state...");
    llMessageLinked(LINK_THIS, K_CANAL_STORAGE, K_IS_MSG_EVENT_STORAGE_INITIALIZED, NULL_KEY);
    orchestratorMode = 0;
    currentTime = 0; // restart from 0
    //llOwnerSay ("Full Monty orchestrator is configured in show mode.");
}

goStateReady(key nbCmdKey) {
  string nbCmd = nbCmdKey;  
  // storage is initialized. Go to state ready
  llOwnerSay("Storage initialized with " + nbCmd + " commands."); 
}

loadStep() {
  llMessageLinked(LINK_THIS, K_CANAL_MASTER, K_MSG_NEXT_STEP, NULL_KEY);
}

bufferizeCmd() {
    debug ("Bufferize commands");
    integer i =0;
    for (i=0; i<K_SIZE_BUFFER;i++) {
      llMessageLinked(LINK_THIS, K_CANAL_STORAGE, K_MSG_GET, NULL_KEY);
    }
}

initializeExecuteState() {
}

readAndExecuteStep() {
    if (orchestratorMode == K_MODE_ORCHESTRATOR_NORMAL) { 
        if (llGetListLength(bufferCmd)>0) {
            integer returnCode = executeStep (llList2String(bufferCmd, 0));
            bufferCmd = llDeleteSubList( bufferCmd, 0, 0);
            //reload next step
            if (returnCode == 1) {
              loadStep();
            }
        }
  }
}

sendCommand (integer channel, string text) {
    llSay (channel, text);
}

integer executeStep(string command) {
  integer returnCode =1;
  debug("line to process : " + command);
  string commandTrimmed = llStringTrim(command, STRING_TRIM);
  list msgCmd = llParseString2List(commandTrimmed, [" "], []);
  string cmd = llToLower(llList2String(msgCmd, 0));
  if (cmd == "at") {
    returnCode = delay(llList2String(msgCmd, 1));
  } else if (cmd == "send") {
      string commandToSend = llStringTrim (command, STRING_TRIM) ;
      string pattern = "";
      integer index1 = llSubStringIndex(commandToSend, "{");
      integer index2 = llSubStringIndex(commandToSend, "}");
      send (llList2String(msgCmd, 1), llGetSubString(commandToSend,index1, index2));
  } else if ( cmd == "smog") {
    smogIntegration (llToLower(llList2String(msgCmd, 1)));
  } else if ( cmd == "cmd") {
    sendCommand (llList2Integer(msgCmd, 1), llList2String(msgCmd, 2));
  } else if (cmd == "channelcmd") {
    selectChannel (llList2String(msgCmd, 1));
  } else if (cmd == "channelmover") {
     selectChannelPoseball (llList2String(msgCmd, 1));    
  } else if (cmd=="waitorder") {
    waitOrder(llList2String(msgCmd, 1));
    returnCode=0;
  } else if (cmd == "rezz") {
      string defaultPose = "";
      if (llGetListLength(msgCmd) >=8) {
        defaultPose =  llList2String(msgCmd,7);   
      }
      cmdRezz(llList2String(msgCmd, 1),
              llList2String(msgCmd, 2),
              llList2String(msgCmd, 3), 
              llList2String(msgCmd, 4), 
              llList2String(msgCmd, 5), 
              llList2String(msgCmd, 6),
              defaultPose);
  } else if (cmd == "rezzprim") {
        cmdRezzPrim(msgCmd, commandTrimmed);
} else if (cmd == "register") {
      if (llGetListLength(msgCmd) >=3) {
          registerComponent(llList2String(msgCmd, 1), llList2String(msgCmd, 2));
      } else {
          error (K_ERR_ORC_001, command);
      }
  } else if (cmd == "handshake") {
        hanshakeComponents(llGetOwner());
  }  else if (cmd == "breakpoint") {
        if (mode == K_MODE_REHEARSAL) {
            orchestratorMode = K_MODE_ORCHESTRATOR_PENDING;
            returnCode=0;
        }
  }
  
  return returnCode;
}

send (string componentId, string command) {
    llMessageLinked(LINK_THIS, K_MSG_INTEGRATOR_SEND, componentId + "|" + command, (key)K_ID_MESSAGELINK_INTEGRATOR);
}

smogIntegration (string action) {
    if (action == "on") {
      llMessageLinked(K_LINK_INTEGRATION, K_CHANNEL_INTEGRATION, K_MSG_INTEGRATION_SMOGON, NULL_KEY);
    } else if (action == "off") {
      llMessageLinked(K_LINK_INTEGRATION, K_CHANNEL_INTEGRATION, K_MSG_INTEGRATION_SMOGOFF, NULL_KEY);
    }
}


float convertInSeconds(string toConvert) {
    float toConvertFloat = (float)toConvert;
    integer nbMin = llFloor(toConvertFloat);
    float nbSeconds = ((toConvertFloat - (float)nbMin) * 100);
    debug ("convert in seconds : " + toConvert + "/" + (string)((nbMin*60) + nbSeconds));
    return (nbMin*60) + nbSeconds;
}

integer delay (string duration) {
    debug ("init delay : " + duration);
    string durationTime = duration;
    integer index = llSubStringIndex(duration, ":");
    if (index >=0) {
        durationTime = llStringTrim(llGetSubString(duration, 0, index-1), STRING_TRIM);
    } 
    integer decimalPartIndex =llSubStringIndex(durationTime, ".");
    string decimalPart = llGetSubString(durationTime, decimalPartIndex+1, llStringLength(durationTime)-1);
    if (llStringLength(decimalPart)<2) {
        
        llSay(PUBLIC_CHANNEL, "Warning: decimal part of a datetime should contains at least 2 digits : " + duration + "(" + decimalPart +")");
    }
    float delay = convertInSeconds(durationTime) - currentTime; 
    debug ("starting timer : " + (string)delay + " sec.");  
    llSetTimerEvent(delay);
    currentTime = currentTime+delay;
    debug ("current time after delay : " + (string)currentTime + " sec."); 
    
    if (delay > 0) {
        return 0;
    } else {
        return 1;
    }
}

selectChannel(string channel) {
  channelChat = (integer)channel;
  handleListenChat = llListen(channelChat, "",llGetOwner(),"");
  debug("Open cmd channel on channel: " + channel);
}

selectChannelPoseball(string channel){
  channelPoseball = (integer)channel;
  handleListenPoseball = llListen(channelPoseball+1, "","","");
  debug("Open poseball channel on channel: " + (string)(channelPoseball+1));
}

waitOrder(string waitCmd) {
  waitCommand =waitCmd;
}

cmdRezzPrim(list msgCmd, string strMsgCmd) {
    string label = llList2String(msgCmd, 2);
    string channel = llList2String(msgCmd, 3);
    llMessageLinked(K_LINK_INTEGRATION, K_CHANNEL_INTEGRATION, K_MSG_REZZ_PRIM, (key)strMsgCmd);   
}

cmdRezz( string template,
        string label, 
        string pos,
        string rot, 
        string offsetAvatar,
        string rotationAvatar,
        string defaultPose) {
    debug ("Executing a rezz cmd for label " + label + ", pos= " + pos + ", rot=" + rot);
    vector vectPos= (vector)pos;
    vector vectRot= (vector)rot;
    debug ("vectorPos =" + (string) vectPos);
    debug ("vectorRot =" + (string) vectRot);
    rotation rot = llEuler2Rot(vectRot * DEG_TO_RAD);
    debug ("rotation =" + (string) rot);
    llRezObject(template, 
                 llGetPos() + vectPos, 
                 <0.0,0.0,0.0>, 
                 rot, 
                 channelPoseball);
   
    poseballNames+= label;      
    poseballDefaultPoses += defaultPose;   
    poseballOffsetAvatar += offsetAvatar; 
    poseballRotationAvatar += rotationAvatar; 
       
    llMessageLinked(LINK_THIS, K_MSG_INTEGRATOR_REGISTER, label + "|" + (string)channelPoseball, (key)K_ID_MESSAGELINK_INTEGRATOR);  
}

registerComponent (string name, string channel) {
    llMessageLinked(LINK_THIS, K_MSG_INTEGRATOR_REGISTER, name + "|" + channel, (key)K_ID_MESSAGELINK_INTEGRATOR);
}

hanshakeComponents(key id) {
    llMessageLinked(LINK_THIS, K_MSG_INTEGRATOR_HANDSHAKE, (string) id, (key)K_ID_MESSAGELINK_INTEGRATOR);
}

resetIntegration(key id) {
   llMessageLinked(LINK_THIS, K_MSG_INTEGRATOR_RESET, (string) id, (key)K_ID_MESSAGELINK_INTEGRATOR);
}

help(key avatar) {
    llGiveInventory(avatar , "Fully Monty master help notecard" );
}

reloadStorage() {
  llMessageLinked(LINK_THIS, K_CANAL_STORAGE, K_MSG_RELOAD_STORAGE, NULL_KEY);
}

show() {
  llSetLinkAlpha(LINK_SET,1.0,ALL_SIDES);
}

hide() {
  llSetLinkAlpha(LINK_SET,0.0,ALL_SIDES);
}

killMovers() {
    integer i = 0;
    integer nbMovers = llGetListLength(poseballNames);
    for (;i< nbMovers; i++) {
        string moverName = llList2String(poseballNames, i);
        send (moverName, K_MSG_MOVER_KILL);
    }
}
 
////////////////////////////////////
// States
////////////////////////////////////
default {
    state_entry(){
        debug (" entering in default state");
         llOwnerSay("Full Monty Master system initializing... ");
        initialize();
    }

    link_message(integer sender, integer canal, string message, key id) {
      debug ("receive message : " + message);  
      if (canal == K_CANAL_MASTER) {
        if (message == K_IS_MSG_EVENT_STORAGE_INITIALIZED_ACK) {
            goStateReady(id);
            state bufferize;
        } 
      } else if (canal == K_CANAL_EVENT) {
        if (message == K_MSG_EVENT_STORAGE_INITIALIZED) {
            goStateReady(id);
            state bufferize;
        } 
      }
    }
}


state bufferize {
    state_entry(){
        debug (" entering in ready state");
        llOwnerSay("Full Monty Master system starting to bufferize choregraphy... ");
        bufferizeCmd();
    }
    
    link_message(integer sender, integer canal, string message, key id) {
      //debug ("receive message : " + message);  
      if (canal == K_CANAL_MASTER) {
        if (message == K_MSG_GET_ACK) {
            bufferCmd += id;
            if (llGetListLength(bufferCmd) == K_SIZE_BUFFER) {
                state execute; 
            }
        } 
      }
    }
}

state execute {
    state_entry(){
        debug (" entering in execute state");
        if (mode == K_MODE_REHEARSAL) {
            llOwnerSay ("Orchestrator is now executing the choreography in rehearsal mode");
        } else {
            llOwnerSay ("Orchestrator is now executing the choreography in show mode");
        }
        initializeExecuteState();
        readAndExecuteStep();
    }
    
    link_message(integer sender, integer canal, string message, key id) {
      //debug ("receive message : " + message);  
      if (canal == K_CANAL_MASTER) {
        if (message == K_MSG_GET_ACK) {
            bufferCmd += id;
        }  else if (message == K_MSG_NEXT_STEP) {
            // load new step from storage
            llMessageLinked(LINK_THIS, K_CANAL_STORAGE, K_MSG_GET, NULL_KEY);
            
            // execute cmd
            readAndExecuteStep();
        }
      }
    }
    
    listen(integer channel, string name, key id, string message) {
        if (channel == channelChat) {
          message = llToLower(message);
          if (id == llGetOwner()) {
            if (message == waitCommand) {
                loadStep();
            } else if (message == "reset") {
                debug ("Killing movers and resetting scripts");
                killMovers();
                resetIntegration(id);
                llResetScript();
            }  else if (message == "help") {
                help(id);
            } else if (message == "reload") {
                killMovers();
                resetIntegration(id);
                reloadStorage();
                llResetScript();
            } else if (message == "kill mover") {
                debug ("Killing movers");
                killMovers();
            } else if (message == "debug on") {
                debugMode = 1;
                llMessageLinked(LINK_THIS, K_CANAL_STORAGE, K_MSG_STORAGE_DEBUGON, NULL_KEY);
                llMessageLinked(K_LINK_INTEGRATION, K_CHANNEL_INTEGRATION, K_MSG_INTEGRATION_DEBUGON, NULL_KEY);
                if (channelPoseball != 0) {
                    llRegionSay(channelPoseball, K_MSG_POSEBALL_DEBUGON);
                }
                debug("Debug on");
            } else if (message == "debug off") {
                debugMode = 0;
                llMessageLinked(LINK_THIS, K_CANAL_STORAGE, K_MSG_STORAGE_DEBUGOFF, NULL_KEY);
                llMessageLinked(K_LINK_INTEGRATION, K_CHANNEL_INTEGRATION, K_MSG_INTEGRATION_DEBUGOFF, NULL_KEY);
                if (channelPoseball != 0) {
                    llRegionSay(channelPoseball, K_MSG_POSEBALL_DEBUGOFF);
                }
                debug("Debug off");
            } else if (message == "show") {
                debug("Showing Full Monty Master");
                show();
            } else if (message == "hide") {
                debug("Hiding Full Monty Master");
                hide();
            } else if (message == "mode rehearsal") {
                mode = K_MODE_REHEARSAL;
                llMessageLinked(LINK_THIS, K_MSG_INTEGRATOR_MODE_REHEARSAL, "", (key)K_ID_MESSAGELINK_INTEGRATOR);
                llOwnerSay ("Full Monty orchestrator is now in mode rehearsal");
            } else if (message=="mode show") {
                llOwnerSay("Full Monty Master is now in show mode");
                llMessageLinked(LINK_THIS, K_MSG_INTEGRATOR_MODE_SHOW, "", (key)K_ID_MESSAGELINK_INTEGRATOR);
                mode = K_MODE_SHOW;
            } else if (message=="continue") {
                if (mode== K_MODE_REHEARSAL) {
                    orchestratorMode = K_MODE_ORCHESTRATOR_NORMAL;
                    readAndExecuteStep();
                }
            }  else if (message=="stop") {
                if (mode== K_MODE_REHEARSAL) {
                    orchestratorMode = K_MODE_ORCHESTRATOR_PENDING;
                    llOwnerSay ("Full Monty orchestrator paused");
                }
            }
          }  
        } else if (channel == channelPoseball+1) {
            debug ("Received a message on poseball channel " + (string)channel + " : " + message + ", id=" + (string)id);

            if (message== K_INIT_POSEBALL) {
                integer index = llListFindList(poseballs, [id]);
                if (index != -1) {
                  string poseballName = llList2String(poseballNames, index); 
                  string defaultPose = llList2String(poseballDefaultPoses, index); 
                  string offsetAvatar = llList2String(poseballOffsetAvatar, index); 
                  string rotationAvatar = llList2String(poseballRotationAvatar, index); 
                  debug("Poseball " + poseballName + " initialized");
                  llRegionSayTo(id, channelPoseball, K_POSEBALL_ACK + "|" + poseballName + "|" + defaultPose + "|" + offsetAvatar+ "|" + rotationAvatar);
                }
            }
        }
    } 
    
    object_rez(key id){
      // a poseball has been rezz. We register it;  
      poseballs += id;
    }
    
    timer() {
      debug ("end of timer");
      llSetTimerEvent(0.0); 
      loadStep();
    }
    
}
