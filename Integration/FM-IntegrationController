////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Lady Green Forensic Component     : Full Monty - INTEGRATION
//
//  Signature                         : LGF/APPS/FULLMONTY/INTEGRATION
//  Component version                 : 1.0.0
//  release date                      : August 2023
//
//  Description : This component allows the integration of an active
//                  component with the full monty system
//
//  States description :
//      default: default state. 
//
//  copyright © Lady Green Forensic 2024
//
//  This script is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License, version 3 
//  (https://www.gnu.org/licenses/gpl-3.0.html)
//
///////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////
// constants
////////////////////////////////////
string K_Version = "1.0.0"; // version of the component

// Configuration
integer K_CHANNEL_CONFIG = 9;
string K_ID_MESSAGELINK_FMPROTOCOL="FMPROTOCOL";
string K_ID_MESSAGELINK_CONFIG_FROM= "CONFIGURATION_FROM";
string K_ID_MESSAGELINK_CONFIG_TO= "CONFIGURATION_TO";
string K_MSG_SEND_CONFIG = "SEND_CONFIG";

// 

// FM Protocol
integer HANDSHAKE_CHANNEL = -10721;
string K_HEADER_MSG_HANDSHAKE = "FM:HANDSHAKE";
string K_CALLBACK_HANDSHAKE = "FM:HANDSHAKE_CALLBACK";

// Errors
string K_ERR_COMPINTEG_001 = "ERR_COMPINTEG_001 : Orchestrator owner changed during handshake";

////////////////////////////////////
// variables
////////////////////////////////////
integer debugMode = 0;
integer channelIntegration  = -1;
key uuidOrchestrator = NULL_KEY; //identifier of FM orchestrator with who a handshake has been realized

////////////////////////////////////
// log function
////////////////////////////////////
debug (string pLog) {
    if (debugMode == 1) {
        llSay(DEBUG_CHANNEL,llGetScriptName()  + ":" + pLog);
    }
}

////////////////////////////////////
// Error function
////////////////////////////////////
error (string errorCode, string pLog) {
    llSay(DEBUG_CHANNEL,llGetScriptName()  + ":" + errorCode + ":  " + pLog);
}

openChannelCmd (integer channel) {
    debug ("Opening channel " + (string) channel + " for chat cmd and FM integration.");
    llListen (channel, "", NULL_KEY, "");
    channelIntegration = channel;
}

///////////////////////////////////////////
// Return the value of a given parameter
///////////////////////////////////////////
string getConfigParameter (string name, list parameters) {
    integer index = llListFindList(parameters, [] + ("Param" + name));
    debug ("Index getParameter pour " + name + " = " + (string) index);
    string returnValue = "";
    if ((index >= 0) && index < (llGetListLength(parameters)-1)) {
        returnValue = llList2String(parameters, index+1); 
    }
    debug ("valeur paramètre pour " + name + " = " + (string) returnValue);
    return returnValue;
}


////////////////////////////////////////////////////////////
// process an handshake requested by a FM orchestrator
///////////////////////////////////////////////////////////
processHandshake (string componentName, key sender) {
    string name = llStringTrim(llGetObjectDesc(), STRING_TRIM);
    debug ("Handshake for : " + componentName + " vs " + name);
    if (name == componentName) {
        // handshake broadcasted is for that prim. We catch it
        if ((uuidOrchestrator != NULL_KEY) && (llGetOwnerKey(uuidOrchestrator) != llGetOwnerKey(sender))) {
            error(K_ERR_COMPINTEG_001, llGetDisplayName(llGetOwnerKey(sender)) + " is the new owner.");
        }
        uuidOrchestrator = sender;
        llRegionSayTo(sender, HANDSHAKE_CHANNEL, K_HEADER_MSG_HANDSHAKE+ "," + name);
        debug ("Sending handshake to channel " + (string)HANDSHAKE_CHANNEL + " to " + (string)sender + " : " + K_HEADER_MSG_HANDSHAKE+ "," + name );
        // sending callback message to all scripts 
        llMessageLinked (LINK_SET, 0, K_CALLBACK_HANDSHAKE, (key) K_ID_MESSAGELINK_FMPROTOCOL);
    }
}

////////////////////////////////////////////////////////////
// Process a one cmd 
///////////////////////////////////////////////////////////
processOneCmd (string cmdLine, key sender) {
    list tokens = llParseString2List(cmdLine, [","], []);
    string cmd = llToUpper(llList2String(tokens, 0));
    
    if (cmd == K_HEADER_MSG_HANDSHAKE) {
        processHandshake (llList2String(tokens, 1), sender);
    } else {
        debug ("ProcessOneCmd sender = " + (string) sender + ", orchestrator = " + (string)uuidOrchestrator);
        if (sender == uuidOrchestrator) {
            llMessageLinked (LINK_SET, 0, cmdLine, (key) K_ID_MESSAGELINK_FMPROTOCOL);
        }
    }
}


////////////////////////////////////////////////////////////
// Process a cmd line that can contains more than one cmd
///////////////////////////////////////////////////////////
processCmdLine (list cmdLine, key sender) {
    
    integer nbCmd = llGetListLength(cmdLine);
    integer i = 0;
    
    for (;i<nbCmd; i++) {
        processOneCmd(llList2String(cmdLine, i), sender);
    }    
}

getConfig(){
    llMessageLinked(LINK_SET, 0, K_MSG_SEND_CONFIG, (key)K_ID_MESSAGELINK_CONFIG_TO);
}


default
{
    state_entry() {
        getConfig();
    }
    
    // configuration management
    link_message(integer sender_num, integer num, string msg, key id) {
        if ((num == K_CHANNEL_CONFIG) && ((string)id == K_ID_MESSAGELINK_CONFIG_FROM)) {
            //this is the config sent by the configSrv
            list parameters = llParseString2List(msg, ["|"], []);
            string value = getConfigParameter("channelCmd", parameters);
            
            if ((integer)value != 0) {
                openChannelCmd((integer)value);
            }
            
        }
    }
    
    // listen commands sent via chat of FM integration
    listen( integer canal, string name, key id, string message) {
        if (canal == channelIntegration) {
            debug ("received msg in listen = " + message + " by " + (string)id);
            list parameters = llParseString2List(message, ["|"], []);   
            processCmdLine(parameters, id); 
        } 
    }
    
    on_rez(integer start_param) {
        // Redémarre le script à chaque fois que l’objet est rez
        llResetScript(); 
    }   
}
